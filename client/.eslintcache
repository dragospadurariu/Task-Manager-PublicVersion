[{"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\index.js":"1","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\App.js":"2","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\landing\\landing.layout.jsx":"3","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\navbar\\navbar.layout.jsx":"4","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\store.js":"5","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\rootReducer.js":"6","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\types.js":"7","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\alert\\alert.layout.jsx":"8","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\auth.action.js":"9","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\auth.reducer.js":"10","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\alert.action.js":"11","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\register.page.jsx":"12","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\login.page.jsx":"13","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\authToken.js":"14","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\alert.reducer.js":"15","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\verify-email.page.jsx":"16","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\routing\\PrivateRoute.component.jsx":"17","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\spinner\\spinner.layout.jsx":"18","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\home\\home.component.jsx":"19","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\card.component.jsx":"20","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\data.reducer.js":"21","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\data.action.js":"22","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\dashboard-card.component.jsx":"23","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\dashboard\\dashboard.page.jsx":"24","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\column\\column.component.jsx":"25","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\dashboard-popup.component.jsx":"26","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\delete-popup.component.jsx":"27","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\column\\add-column.component.jsx":"28","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\columns.reducer.js":"29","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\column.action.js":"30","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\edit-popup-component.jsx":"31","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task.component.jsx":"32","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\tasks.utils.js":"33","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\task.reducer.js":"34","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\task.action.js":"35","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-window.component.jsx":"36","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-title.component.jsx":"37","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-description.component.jsx":"38","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-comments.component.jsx":"39","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\context\\TaskContext.jsx":"40","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\modal.style.js":"41","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\lable-card.component.jsx":"42","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\label.actions.js":"43","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\label.reducer.js":"44","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\lable-list.component.jsx":"45","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\label-list-popup.component.jsx":"46","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\tooltip.component.jsx":"47","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\dashboard\\participants-box.component.jsx":"48","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\global.functions.js":"49"},{"size":361,"mtime":1609069485331,"results":"50","hashOfConfig":"51"},{"size":1950,"mtime":1615534027059,"results":"52","hashOfConfig":"51"},{"size":1024,"mtime":1608025174286,"results":"53","hashOfConfig":"51"},{"size":3792,"mtime":1614011670762,"results":"54","hashOfConfig":"51"},{"size":409,"mtime":1607765306798,"results":"55","hashOfConfig":"51"},{"size":430,"mtime":1610718711483,"results":"56","hashOfConfig":"51"},{"size":1569,"mtime":1615207268702,"results":"57","hashOfConfig":"51"},{"size":396,"mtime":1607853718455,"results":"58","hashOfConfig":"51"},{"size":2532,"mtime":1610551091311,"results":"59","hashOfConfig":"51"},{"size":1345,"mtime":1608278963418,"results":"60","hashOfConfig":"51"},{"size":366,"mtime":1608204148412,"results":"61","hashOfConfig":"51"},{"size":4464,"mtime":1608278957329,"results":"62","hashOfConfig":"51"},{"size":2758,"mtime":1608025034590,"results":"63","hashOfConfig":"51"},{"size":277,"mtime":1607867196650,"results":"64","hashOfConfig":"51"},{"size":441,"mtime":1607867456778,"results":"65","hashOfConfig":"51"},{"size":1700,"mtime":1608278296634,"results":"66","hashOfConfig":"51"},{"size":541,"mtime":1607942234748,"results":"67","hashOfConfig":"51"},{"size":545,"mtime":1615455066060,"results":"68","hashOfConfig":"51"},{"size":2092,"mtime":1615454929161,"results":"69","hashOfConfig":"51"},{"size":1606,"mtime":1615279515363,"results":"70","hashOfConfig":"51"},{"size":1341,"mtime":1615450811156,"results":"71","hashOfConfig":"51"},{"size":2431,"mtime":1615450786508,"results":"72","hashOfConfig":"51"},{"size":1550,"mtime":1615206808910,"results":"73","hashOfConfig":"51"},{"size":5790,"mtime":1615455075522,"results":"74","hashOfConfig":"51"},{"size":6132,"mtime":1614165855972,"results":"75","hashOfConfig":"51"},{"size":2805,"mtime":1608548128653,"results":"76","hashOfConfig":"51"},{"size":755,"mtime":1608551419627,"results":"77","hashOfConfig":"51"},{"size":2003,"mtime":1614152062783,"results":"78","hashOfConfig":"51"},{"size":1087,"mtime":1608550648224,"results":"79","hashOfConfig":"51"},{"size":1373,"mtime":1615365057476,"results":"80","hashOfConfig":"51"},{"size":2021,"mtime":1608551385426,"results":"81","hashOfConfig":"51"},{"size":4455,"mtime":1615288558289,"results":"82","hashOfConfig":"51"},{"size":377,"mtime":1608558336253,"results":"83","hashOfConfig":"51"},{"size":1236,"mtime":1609169308028,"results":"84","hashOfConfig":"51"},{"size":3098,"mtime":1615278901314,"results":"85","hashOfConfig":"51"},{"size":7142,"mtime":1615375178724,"results":"86","hashOfConfig":"51"},{"size":387,"mtime":1610633666601,"results":"87","hashOfConfig":"51"},{"size":1315,"mtime":1613568891207,"results":"88","hashOfConfig":"51"},{"size":2787,"mtime":1615375277302,"results":"89","hashOfConfig":"51"},{"size":91,"mtime":1609075021225,"results":"90","hashOfConfig":"51"},{"size":266,"mtime":1609167013320,"results":"91","hashOfConfig":"51"},{"size":2107,"mtime":1615377530779,"results":"92","hashOfConfig":"51"},{"size":1276,"mtime":1615377580601,"results":"93","hashOfConfig":"51"},{"size":942,"mtime":1613569662273,"results":"94","hashOfConfig":"51"},{"size":1862,"mtime":1614148115270,"results":"95","hashOfConfig":"51"},{"size":2600,"mtime":1613569615214,"results":"96","hashOfConfig":"51"},{"size":1157,"mtime":1614011541909,"results":"97","hashOfConfig":"51"},{"size":4052,"mtime":1615284228197,"results":"98","hashOfConfig":"51"},{"size":477,"mtime":1615278765254,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1095hff",{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"102"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\index.js",[],["213","214"],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\App.js",["215"],"import React, { Fragment, useEffect } from 'react';\nimport './App.css';\nimport Landing from './components/layout/landing/landing.layout';\nimport Navbar from './components/layout/navbar/navbar.layout';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Register from './components/auth/register.page';\nimport Login from './components/auth/login.page';\nimport { setAuthToken } from './components/utils/authToken.js';\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport 'animate.css';\n//Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport VerifyEmail from './components/auth/verify-email.page';\nimport { loadUser } from './actions/auth.action';\nimport PrivateRoute from './components/routing/PrivateRoute.component';\nimport Home from './components/home/home.component';\nimport Dashboard from './components/dashboard/dashboard.page';\nimport socketIOClient from 'socket.io-client';\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch(loadUser(localStorage.token));\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Fragment>\n          <ReactNotification />\n          <Navbar />\n          <div className='container'>\n            <Route exact path='/' component={Landing} />\n            <Switch>\n              <Route\n                path='/users/signup/activate/:token'\n                component={VerifyEmail}\n              />\n              <Route exact path='/register' component={Register} />\n              <Route exact path='/login' component={Login} />\n              <PrivateRoute exact path='/dashboard/:id' component={Dashboard} />\n              <PrivateRoute exact path='/home' component={Home} />\n            </Switch>\n          </div>\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\landing\\landing.layout.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\navbar\\navbar.layout.jsx",["216"],"import React, { Fragment, useState, useRef, useEffect } from 'react';\r\nimport './navbar.styles.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport Tippy from '@tippyjs/react';\r\n\r\nimport { fetchLogout } from '../../../actions/auth.action';\r\nimport ToolTipComponent from '../../utils/tooltip.component';\r\n\r\nexport const Navbar = () => {\r\n  const { isAuthenticated, loading } = useSelector((state) => state.auth);\r\n  const [showNotificationDropdown, setShowNotificationDropdown] = useState(\r\n    false\r\n  );\r\n  const dispatch = useDispatch();\r\n  const notificationContainer = useRef();\r\n  const [notifications, setNotications] = useState([\r\n    { message: 'Welcome to Task Manager', id: 1, read: true },\r\n  ]);\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (\r\n      notificationContainer.current &&\r\n      notificationContainer.current.contains(e.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setShowNotificationDropdown(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showNotificationDropdown) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    } else {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [showNotificationDropdown]);\r\n\r\n  const authLinks = (\r\n    <Fragment>\r\n      <h1 style={{ marginRight: 'auto' }}>\r\n        <Link to='/'>Task Tracker</Link>\r\n      </h1>\r\n      <div className='notification-container' ref={notificationContainer}>\r\n        <span\r\n          className='icon-material'\r\n          style={{ fontSize: '3rem' }}\r\n          onClick={() => setShowNotificationDropdown((prevState) => !prevState)}\r\n        >\r\n          <ToolTipComponent text='Notifications'>\r\n            <span>circle_notifications</span>\r\n          </ToolTipComponent>\r\n        </span>\r\n\r\n        {showNotificationDropdown && (\r\n          <div className='notification-nav'>\r\n            <div className='notification-nav-dropdown'>\r\n              <span className='notification-nav-dropdown-title'>\r\n                Notications\r\n              </span>\r\n              {notifications.map((notifaction) => {\r\n                return (\r\n                  <span\r\n                    key={notifaction.id}\r\n                    className='notification-nav-row'\r\n                    style={\r\n                      notifaction.read ? null : { backgroundColor: '#43464b' }\r\n                    }\r\n                    onClick={() =>\r\n                      setNotications(\r\n                        notifications.map((not) =>\r\n                          not.id === notifaction.id\r\n                            ? { ...not, read: true }\r\n                            : not\r\n                        )\r\n                      )\r\n                    }\r\n                  >\r\n                    {notifaction.message}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <a\r\n        onClick={() => dispatch(fetchLogout())}\r\n        href='#!'\r\n        className='a-container'\r\n      >\r\n        <span style={{ fontFamily: 'Material Icons' }}>exit_to_app</span>\r\n        <span>Logout</span>\r\n      </a>\r\n    </Fragment>\r\n  );\r\n\r\n  const guessLinks = (\r\n    <Fragment>\r\n      <h1>\r\n        <Link to='/'>Task Tracker</Link>\r\n      </h1>\r\n      <ul>\r\n        <li>\r\n          <Link to='/register'>Register</Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/login'>Login</Link>\r\n        </li>\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <nav className='navbar bg-dark'>\r\n      {!loading && (isAuthenticated ? authLinks : guessLinks)}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\store.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\rootReducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\types.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\alert\\alert.layout.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\auth.action.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\auth.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\alert.action.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\register.page.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\login.page.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\authToken.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\alert.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\auth\\verify-email.page.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\routing\\PrivateRoute.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\layout\\spinner\\spinner.layout.jsx",["217"],"import React from 'react';\r\nimport spinner from '../../../images/spinner.gif';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      <Loader type='ThreeDots' color='#00BFFF' height={100} width={100} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\home\\home.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\card.component.jsx",["218","219"],"import React, { useState } from 'react';\r\nimport { addDashboard } from '../../actions/data.action';\r\nimport './card.styles.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport Alert from '../layout/alert/alert.layout';\r\nimport { setAlert } from '../../actions/alert.action';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nconst Card = ({ title, style }) => {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n\r\n  const createDashboard = (name) => {\r\n    if (name === '') {\r\n      return dispatch(setAlert('The name is mandatory.', 'danger'));\r\n    }\r\n    dispatch(addDashboard(name));\r\n    setName('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='card card-first' style={style}>\r\n      <div className='card-container'>\r\n        <span className='card-title'>{title}</span>\r\n        <div className='card-data'>\r\n          <span className='data-name'>Name</span>\r\n          <input\r\n            type='text'\r\n            className='data-input'\r\n            value={name}\r\n            onChange={(event) => onChange(event)}\r\n            onKeyDown={(e) =>\r\n              e.key === 'Enter' ? createDashboard(name) : null\r\n            }\r\n          />\r\n        </div>\r\n        <div className='card-action'>\r\n          <Alert />\r\n          <button\r\n            className='btn btn-tertiary margin-top-10 card-action-button'\r\n            onClick={() => createDashboard(name)}\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\data.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\data.action.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\dashboard-card.component.jsx",["220"],"import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './dashboard-card.styles.scss';\r\nimport DashboardPopup from './dashboard-popup.component';\r\nimport Modal from 'react-modal';\r\nimport { modalStyles } from '../utils/modal.style';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport Tippy from '@tippyjs/react';\r\nimport ToolTipComponent from '../utils/tooltip.component';\r\n\r\nconst DashboardCard = ({ title, id, dashboard }) => {\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [showDashboardPopup, setShowDashboardPopup] = useState(false);\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <div className='dashboard-card-item'>\r\n      <span\r\n        className='icon-material absolute-top-page'\r\n        onClick={() => {\r\n          setShowDashboardPopup((prevState) => !prevState);\r\n          setDashboardData({ title, id });\r\n        }}\r\n      >\r\n        <ToolTipComponent text='Dashboard settings'>\r\n          <span>more_horiz</span>\r\n        </ToolTipComponent>\r\n      </span>\r\n      <span\r\n        className='dashboard-card-title'\r\n        onClick={() => history.push(`/dashboard/${id}`)}\r\n      >\r\n        {title}\r\n      </span>\r\n\r\n      <Modal\r\n        ariaHideApp={false}\r\n        className='dashboard-card-popup'\r\n        isOpen={showDashboardPopup}\r\n        style={modalStyles}\r\n      >\r\n        <DashboardPopup\r\n          setShowDashboardPopup={setShowDashboardPopup}\r\n          dashboardData={dashboardData}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardCard;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\dashboard\\dashboard.page.jsx",["221"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getColumnsByDashboardID } from '../../actions/column.action';\r\nimport { CLEAR_ALL_COLUMNS } from '../../actions/types';\r\nimport AddColumn from '../column/add-column.component';\r\nimport Column from '../column/column.component';\r\nimport './dashboard.styles.scss';\r\nimport { BeatLoader } from 'react-spinners';\r\nimport { getTasksByDashboard } from '../../actions/task.action';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { updateTaskOrder } from '../../actions/task.action';\r\nimport { getAllLabels } from '../../actions/label.actions';\r\nimport { useHistory } from 'react-router';\r\nimport { deletePartipant, getDashboards } from '../../actions/data.action';\r\nimport { loadUser } from '../../actions/auth.action';\r\nimport ParticipantsBox from './participants-box.component';\r\nimport LableCard from '../mini-components/lable-card.component';\r\nimport LableList from '../mini-components/lable-list.component';\r\nimport Spinner from '../layout/spinner/spinner.layout';\r\n\r\nconst Dashboard = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { id } = props.match.params;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      await dispatch(getColumnsByDashboardID(id));\r\n      await dispatch(getTasksByDashboard(id));\r\n      await dispatch(getDashboards());\r\n      await dispatch(getAllLabels(id));\r\n      await dispatch(loadUser(localStorage.token));\r\n    };\r\n    getData();\r\n    setLoading(false);\r\n    return dispatch({ type: CLEAR_ALL_COLUMNS });\r\n  }, [dispatch, id]);\r\n\r\n  const { columns } = useSelector((state) => state.columns);\r\n  const [loading, setLoading] = useState(true);\r\n  const { tasks } = useSelector((state) => state.taskReducer);\r\n  const dashboard = useSelector((state) => state.data.dashboards).find(\r\n    (dashb) => dashb._id === id\r\n  );\r\n  const { user } = useSelector((state) => state.auth);\r\n  const [showParticipantsBox, setShowParticipantsBox] = useState(false);\r\n  const [showAddLable, setShowAddLable] = useState(false);\r\n  const [showLabelList, setShowLabelList] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 500);\r\n  }, [columns]);\r\n\r\n  const handleOnDragEnd = async (result) => {\r\n    if (!result.destination) return null;\r\n\r\n    const updatedTask = tasks.find((item) => item._id === result.draggableId);\r\n    updatedTask.column = result.destination.droppableId;\r\n    const updatedInformation = {\r\n      column: result.destination.droppableId,\r\n    };\r\n\r\n    dispatch(\r\n      updateTaskOrder(\r\n        result.draggableId,\r\n        result.draggableId,\r\n        updatedInformation\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='dashboard'>\r\n      <div className='dashboard-header'>\r\n        <div\r\n          className='top-bar-button'\r\n          onMouseEnter={() => setShowParticipantsBox(true)}\r\n          onMouseLeave={() => setShowParticipantsBox(false)}\r\n          style={{ position: 'relative' }}\r\n        >\r\n          <span className='icon-material' style={{ marginRight: '.5rem' }}>\r\n            person_add\r\n          </span>\r\n          <span className='dashboard-add-participants'> Add participants</span>\r\n\r\n          <ParticipantsBox\r\n            title={'Add participants'}\r\n            id={id}\r\n            style={{ display: showParticipantsBox ? 'block' : 'none' }}\r\n          />\r\n        </div>\r\n        {user !== undefined && dashboard !== undefined ? (\r\n          user.user._id !== dashboard?.owner ? (\r\n            <div\r\n              className='top-bar-button'\r\n              style={{ position: 'relative' }}\r\n              onClick={async () => {\r\n                await dispatch(deletePartipant(id, user.user._id));\r\n                history.push('/home');\r\n              }}\r\n            >\r\n              <span className='icon-material' style={{ marginRight: '.5rem' }}>\r\n                highlight_off\r\n              </span>\r\n              <span>Exit dashboard</span>\r\n            </div>\r\n          ) : null\r\n        ) : null}\r\n\r\n        <div\r\n          className='margin-left-2 top-bar-button card-second'\r\n          onMouseEnter={() => setShowAddLable(true)}\r\n          onMouseLeave={() => setShowAddLable(false)}\r\n        >\r\n          <span className='icon-material'>add</span>\r\n          <span>Add new lable</span>\r\n          <LableCard\r\n            title={'Add new lable'}\r\n            style={{ display: showAddLable ? 'block' : 'none' }}\r\n            dashboardId={id}\r\n          ></LableCard>\r\n        </div>\r\n        <div\r\n          className='margin-left-2 top-bar-button card-third'\r\n          onMouseEnter={() => setShowLabelList(true)}\r\n          onMouseLeave={() => setShowLabelList(false)}\r\n        >\r\n          <span className='icon-material'>list_alt</span>\r\n          <span>Lable List</span>\r\n          <LableList\r\n            title={'Label list'}\r\n            style={{ display: showLabelList ? 'block' : 'none' }}\r\n          ></LableList>\r\n        </div>\r\n      </div>\r\n      <div className='dashboard-content'>\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Fragment>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n              {columns.map((column) => {\r\n                return (\r\n                  <Column\r\n                    name={column.name}\r\n                    key={column._id}\r\n                    dashboardID={id}\r\n                    id={column._id}\r\n                  />\r\n                );\r\n              })}\r\n            </DragDropContext>\r\n            <AddColumn dashboardID={id}></AddColumn>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\column\\column.component.jsx",["222","223"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport './column.styles.scss';\r\nimport Task from '../task/task.component';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewTask } from '../../actions/task.action';\r\nimport { TaskContext } from '../context/TaskContext';\r\nimport EditPopUp from '../mini-components/edit-popup-component';\r\nimport Modal from 'react-modal';\r\nimport { modalStyles } from '../utils/modal.style';\r\nimport { setAlert } from '../../actions/alert.action';\r\nimport { deleteColumn, updateColumn } from '../../actions/column.action';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport ToolTipComponent from '../utils/tooltip.component';\r\nimport { useTransition, animated, useSpring } from 'react-spring';\r\n\r\nconst Column = ({ id, name }) => {\r\n  const [taskName, setTaskName] = useState('');\r\n  const [tasksNumber, setTasksNumber] = useState(0);\r\n  const [showInputField, setShowInputField] = useState(false);\r\n  const { tasks } = useSelector((state) => state.taskReducer);\r\n  const [showEditPopup, setShowEditPopup] = useState(false);\r\n  const [editPopupData, setEditPopupData] = useState(null);\r\n\r\n  const taskTransition = useTransition(tasks, (task) => task._id, {\r\n    from: { opacity: 0, marginLeft: -100, marginRight: 100 },\r\n    enter: { opacity: 1, marginLeft: 0, marginRight: 0 },\r\n    leave: { opacity: 0, marginLeft: -100, marginRight: 100 },\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const addTask = () => {\r\n    if (!taskName) return null;\r\n\r\n    dispatch(addNewTask(id, taskName));\r\n    setTaskName('');\r\n    setShowInputField(false);\r\n  };\r\n\r\n  const getTasksNumber = useCallback(() => {\r\n    const array = tasks.filter((task) => {\r\n      return id === task.column;\r\n    });\r\n    setTasksNumber(parseInt(array.length));\r\n  }, [tasks, id]);\r\n\r\n  const changeColumnName = async (name, id) => {\r\n    if (!name) {\r\n      return dispatch(setAlert('The name field is mandatory', 'danger'));\r\n    }\r\n    await dispatch(updateColumn(name, id));\r\n    setShowEditPopup((prevState) => !prevState);\r\n  };\r\n\r\n  const [deletePopup, setDeletePopup] = useState(false);\r\n  const deleteMessage = 'Are you sure you want to delete this column?';\r\n\r\n  const deleteElement = async (id) => {\r\n    await dispatch(deleteColumn(id));\r\n    setDeletePopup((prevState) => !prevState);\r\n    setEditPopupData(null);\r\n    setShowEditPopup((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTasksNumber();\r\n  }, [tasks, getTasksNumber]);\r\n\r\n  return (\r\n    <div className='column'>\r\n      <div className='column-header'>\r\n        <div className='column-header-text'>{name}</div>\r\n        <div className='column-header-number'>{tasksNumber}</div>\r\n        <div className='column-header-add'>\r\n          <span\r\n            className='icon-material'\r\n            style={{ fontSize: '1.7rem', marginRight: '.5rem' }}\r\n            onClick={() => {\r\n              setShowInputField((prevState) => !prevState);\r\n            }}\r\n          >\r\n            <ToolTipComponent text='Add new task'>\r\n              <span>add</span>\r\n            </ToolTipComponent>\r\n          </span>\r\n        </div>\r\n\r\n        <div className='column-header-more'>\r\n          <span\r\n            className='icon-material'\r\n            style={{ fontSize: '1.7rem' }}\r\n            onClick={() => {\r\n              setEditPopupData({ title: name, id });\r\n              setShowEditPopup((prevState) => !prevState);\r\n            }}\r\n          >\r\n            <ToolTipComponent text='Edit column'>\r\n              <span>more_horiz</span>\r\n            </ToolTipComponent>\r\n          </span>\r\n        </div>\r\n        {showInputField && (\r\n          <div className='column-header-add-container'>\r\n            <input\r\n              className='column-header-input'\r\n              value={taskName}\r\n              onChange={(e) => setTaskName(e.target.value)}\r\n              onKeyDown={(e) => e.key === 'Enter' && addTask()}\r\n            ></input>\r\n            <button\r\n              className='btn btn-tertiary'\r\n              style={{ marginLeft: '25%' }}\r\n              onClick={() => {\r\n                setShowInputField((prevState) => !prevState);\r\n              }}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button className='btn btn-success' onClick={() => addTask()}>\r\n              Save\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <Modal\r\n        ariaHideApp={false}\r\n        className='task-window-modal'\r\n        isOpen={showEditPopup}\r\n        style={modalStyles}\r\n      >\r\n        <EditPopUp\r\n          editPopupData={editPopupData}\r\n          setShowEditPopup={setShowEditPopup}\r\n          renameElement={changeColumnName}\r\n          deleteElement={deleteElement}\r\n          deleteMessage={deleteMessage}\r\n        />\r\n      </Modal>\r\n      {/*Drag and Drop Task */}\r\n      <Droppable droppableId={id}>\r\n        {(provided) => (\r\n          <div\r\n            className='tasks-wrapper'\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {taskTransition.map(({ item, key, props }) => {\r\n              if (item.column === id)\r\n                return (\r\n                  <animated.div key={key} style={props}>\r\n                    <TaskContext.Provider value={item} key={key}>\r\n                      <Draggable draggableId={item._id} index={key}>\r\n                        {(provided) => (\r\n                          <Task\r\n                            name={item.name}\r\n                            taskObject={item}\r\n                            id={item._id}\r\n                            innerRef={provided.innerRef}\r\n                            provided={provided}\r\n                          />\r\n                        )}\r\n                      </Draggable>\r\n                    </TaskContext.Provider>\r\n                  </animated.div>\r\n                );\r\n              return null;\r\n            })}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\dashboard-popup.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\delete-popup.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\column\\add-column.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\columns.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\column.action.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\edit-popup-component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task.component.jsx",["224","225","226","227","228"],"import React, { useState, useEffect } from 'react';\r\nimport TaskWindow from './task-window.component';\r\nimport './task.styles.scss';\r\nimport Modal from 'react-modal';\r\nimport { modalStyles } from '../utils/modal.style';\r\nimport { deleteTaskAction } from '../../actions/task.action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport styled from 'styled-components';\r\nimport ToolTipComponent from '../utils/tooltip.component';\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: '1rem',\r\n        fontFamily: 'inherit',\r\n        whiteSpace: 'pre-line',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Task = ({ name, id, taskObject, provided, innerRef }) => {\r\n  const [showTaskWindow, setShowTaskWindow] = useState(false);\r\n  const colors = ['#009FD4'];\r\n\r\n  const dispatch = useDispatch();\r\n  const dueDate = taskObject.dueDate;\r\n  const { labels } = useSelector((state) => state.labelReducer);\r\n  const description = !taskObject.description\r\n    ? 'Description not yet set'\r\n    : taskObject.description;\r\n\r\n  const findLabel = (task) => {\r\n    let labelObject = null;\r\n    if (task.label !== null) {\r\n      const label = labels.find((lab) => lab._id === task.label);\r\n      label ? (labelObject = label) : (labelObject = null);\r\n    }\r\n\r\n    return labelObject;\r\n  };\r\n  const label = findLabel(taskObject);\r\n\r\n  useEffect(() => {\r\n    const checkPastDueDate = () => {\r\n      const dueDateElement = document.getElementById(`due-date-${id}`);\r\n      if (dueDate) {\r\n        const newDueDate = new Date(dueDate);\r\n        const nowDate = Date.now();\r\n        const pastDueDate = newDueDate.getTime() <= nowDate;\r\n\r\n        pastDueDate\r\n          ? (dueDateElement.className = 'task-container-duedate outdated')\r\n          : (dueDateElement.className = 'task-container-duedate');\r\n\r\n        return pastDueDate;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n\r\n    checkPastDueDate();\r\n  }, [dueDate, id]);\r\n\r\n  return (\r\n    <div\r\n      className={`task-container task-container-${id}`}\r\n      {...provided.draggableProps}\r\n      {...provided.dragHandleProps}\r\n      ref={innerRef}\r\n      // style={{\r\n      //   border: `0.01em solid ${getLabelColorCode(taskObject)}`,\r\n      // }}\r\n    >\r\n      <MuiThemeProvider theme={theme}>\r\n        <Tooltip title={description}>\r\n          <span>{name}</span>\r\n        </Tooltip>\r\n      </MuiThemeProvider>\r\n\r\n      <span\r\n        className='icon-material task-icon-edit'\r\n        onClick={() => setShowTaskWindow((prevState) => !prevState)}\r\n      >\r\n        <ToolTipComponent text='Task information window'>\r\n          <span>edit</span>\r\n        </ToolTipComponent>\r\n      </span>\r\n\r\n      {/* <span\r\n        className='icon-material task-icon-delete'\r\n        onClick={() => dispatch(deleteTaskAction(id))}\r\n      >\r\n        <ToolTipComponent text='Delete the task'>\r\n          <span>delete</span>\r\n        </ToolTipComponent>\r\n      </span> */}\r\n      <div\r\n        className='task-users-avatar'\r\n        style={{\r\n          backgroundColor: `${\r\n            colors[Math.floor(Math.random() * colors.length)]\r\n          }`,\r\n        }}\r\n      >\r\n        <span className='task-users-avatar-initial'>\r\n          {taskObject.owner.name &&\r\n            taskObject.owner.name\r\n              .split(' ')\r\n              .map((el) => el[0])\r\n              .join('.')\r\n              .toUpperCase()}\r\n        </span>\r\n      </div>\r\n      {label ? (\r\n        <span\r\n          className='task-container-labelname'\r\n          style={{ backgroundColor: `${label.colorCode}` }}\r\n        >\r\n          {label.name}\r\n        </span>\r\n      ) : null}\r\n\r\n      {dueDate ? (\r\n        <Moment\r\n          date={dueDate}\r\n          format='MMMM DD, yyyy'\r\n          className='task-container-duedate'\r\n          id={`due-date-${id}`}\r\n        />\r\n      ) : null}\r\n      <Modal\r\n        ariaHideApp={false}\r\n        className='task-window-modal'\r\n        isOpen={showTaskWindow}\r\n        style={modalStyles}\r\n      >\r\n        <TaskWindow\r\n          setShowTaskWindow={setShowTaskWindow}\r\n          id={id}\r\n          taskObject={taskObject}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\tasks.utils.js",[],["229","230"],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\task.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\task.action.js",["231"],"import axios from 'axios';\r\nimport {\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  GET_TASKS_BY_DASHBOARD,\r\n  UPDATE_TASK,\r\n  UPDATE_TASK_COMMENTS,\r\n} from './types';\r\nimport { setAlert } from './alert.action';\r\nimport { handleNotification } from '../components/utils/global.functions';\r\n\r\nconst config = {\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n};\r\n\r\nexport const getTasksByDashboard = (dashboardID) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/task/dashboard/${dashboardID}`);\r\n    dispatch({ type: GET_TASKS_BY_DASHBOARD, payload: res.data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const addNewTask = (columnID, name) => async (dispatch) => {\r\n  const body = JSON.stringify({ name });\r\n  try {\r\n    const res = await axios.post(`/task/column/${columnID}`, body, config);\r\n    dispatch({ type: ADD_TASK, payload: res.data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const addTaskComment = (taskId, text) => async (dispatch) => {\r\n  const body = JSON.stringify({ text });\r\n  try {\r\n    const res = await axios.post(`/task/comments/${taskId}`, body, config);\r\n    dispatch({\r\n      type: UPDATE_TASK_COMMENTS,\r\n      payload: { id: taskId, comments: res.data },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteTaskCommentAction = (taskId, commentId) => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    const res = await axios.delete(`/task/comments/${taskId}/${commentId}`);\r\n    dispatch({\r\n      type: UPDATE_TASK_COMMENTS,\r\n      payload: { id: taskId, comments: res.data },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateTask = (taskId, updatedTask) => async (dispatch) => {\r\n  const body = JSON.stringify(updatedTask);\r\n  try {\r\n    const res = await axios.patch(`/task/${taskId}`, body, config);\r\n    dispatch({\r\n      type: UPDATE_TASK,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateTaskOrder = (\r\n  taskId,\r\n  updatedTask,\r\n  updatedInformation\r\n) => async (dispatch) => {\r\n  const body = JSON.stringify(updatedInformation);\r\n  axios.patch(`/task/${taskId}`, body, config);\r\n  try {\r\n    dispatch({\r\n      type: UPDATE_TASK,\r\n      payload: updatedTask,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteTaskAction = (taskId) => async (dispatch) => {\r\n  console.log('task.action');\r\n  try {\r\n    const res = await axios.delete(`/task/${taskId}`, config);\r\n    dispatch({ type: DELETE_TASK, payload: res.data });\r\n  } catch (error) {\r\n    handleNotification(\r\n      'Delete task',\r\n      'Only the task owner can delete the task',\r\n      'danger'\r\n    );\r\n  }\r\n};\r\n\r\n// export const reorderTasks = (taskId, updatedTask) => async (dispatch) => {\r\n//   const body = JSON.stringify(updatedTask);\r\n//   try {\r\n//     const res = await axios.patch(`/task/${taskId}`, body, config);\r\n//     dispatch({\r\n//       type: UPDATE_TASK,\r\n//       payload: res.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-window.component.jsx",["232","233"],"import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport './task-window.styles.scss';\r\nimport DatePicker from 'react-datepicker';\r\nimport './date-picker.styles.scss';\r\nimport TaskTitle from './task-title.component';\r\nimport TaskDescription from './task-description.component';\r\nimport TaskComments from './task-comments.component';\r\nimport { TaskContext } from '../context/TaskContext';\r\nimport Moment from 'react-moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateTask, deleteTaskAction } from '../../actions/task.action';\r\n\r\nconst TaskWindow = ({ setShowTaskWindow }) => {\r\n  const dispatch = useDispatch();\r\n  const { labels } = useSelector((state) => state.labelReducer);\r\n\r\n  const task = useContext(TaskContext);\r\n  const creationDate = task.createdAt;\r\n\r\n  //Task States\r\n  const [description, setDescription] = useState(task.description);\r\n  const [taskTitle, setTaskTitle] = useState(task.name);\r\n  const [dueDate, setDueDate] = useState(\r\n    task.dueDate ? new Date(task.dueDate) : null\r\n  );\r\n\r\n  const [showLabelDropdown, setShowLabelDropdown] = useState(false);\r\n  //Use Ref because state value dispatched on unmount will be the state value during the initial mount due to closure.\r\n  const taskTitleRef = useRef(taskTitle);\r\n  const taskDescriptionRef = useRef(description);\r\n  const taskDueDateRef = useRef(dueDate);\r\n\r\n  useEffect(() => {\r\n    taskTitleRef.current = taskTitle;\r\n    taskDescriptionRef.current = description;\r\n    taskDueDateRef.current = dueDate;\r\n  }, [taskTitle, description, dueDate]);\r\n\r\n  const getLabelName = () => {\r\n    return task.label === null\r\n      ? 'Set Label'\r\n      : labels.find((label) => label._id == task.label)?.name == null\r\n      ? 'Set label'\r\n      : labels.find((label) => label._id == task.label)?.name;\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (\r\n        taskTitleRef.current !== task.name ||\r\n        taskDescriptionRef.current !== task.description ||\r\n        taskDueDateRef.current?.getTime() !== new Date(task.dueDate)?.getTime()\r\n      ) {\r\n        const updatedTask = {\r\n          name: taskTitleRef.current,\r\n          description: taskDescriptionRef.current,\r\n          dueDate: taskDueDateRef.current,\r\n        };\r\n        dispatch(updateTask(task._id, updatedTask));\r\n      }\r\n    };\r\n  }, [dispatch, task.name, task.description, task.dueDate, task._id]);\r\n\r\n  const deleteTask = () => {\r\n    dispatch(deleteTaskAction(task._id));\r\n  };\r\n\r\n  return (\r\n    <div className='task-window'>\r\n      <div className='task-window-container'>\r\n        <TaskTitle\r\n          taskTitle={taskTitle}\r\n          setTaskTitle={setTaskTitle}\r\n          className='text-large'\r\n        />\r\n        <div className='task-window-main'>\r\n          <TaskDescription\r\n            description={description}\r\n            setDescription={setDescription}\r\n          />\r\n          <TaskComments\r\n            comments={task.comments}\r\n            taskId={task._id}\r\n            name={task.owner.name}\r\n            email={task.owner.email}\r\n          />\r\n        </div>\r\n        {/* Sidebar  */}\r\n        <div className='task-window-sidebar'>\r\n          {/* Creation Date  */}\r\n          <div className='task-window-date'>\r\n            <span className='task-window-date-title text-medium'>\r\n              <span className='icon-material task-window-date-icon'>\r\n                calendar_today\r\n              </span>\r\n              Creation date\r\n            </span>\r\n            <div className='task-window-creation-date-timestamp-container'>\r\n              <span className='task-window-date-timestamp'>\r\n                <Moment date={creationDate} format='MMMM DD, yyyy' />\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {/* Due Date  */}\r\n          <div className='task-window-date'>\r\n            <span className='task-window-date-title text-medium'>\r\n              <span className='icon-material task-window-date-icon'>\r\n                access_alarm\r\n              </span>\r\n              Due date\r\n            </span>\r\n            <DatePicker\r\n              dateFormat='MMMM dd, yyyy'\r\n              onChange={(date) => setDueDate(date)}\r\n              selected={dueDate}\r\n              placeholderText='Due Date'\r\n            />\r\n          </div>\r\n          {/* Label List  */}\r\n          <div\r\n            className='task-window-labels'\r\n            onMouseEnter={() => setShowLabelDropdown(true)}\r\n            onMouseLeave={() => setShowLabelDropdown(false)}\r\n          >\r\n            <span className='task-window-labels-title text-medium'>\r\n              <span className='icon-material task-window-date-icon'>\r\n                list_alt\r\n              </span>\r\n              {getLabelName()}\r\n            </span>\r\n\r\n            {showLabelDropdown && (\r\n              <div className='task-window-labels-dropdown'>\r\n                {labels.length > 0 ? (\r\n                  <React.Fragment>\r\n                    <div\r\n                      className='task-window-labels-dropdown-row'\r\n                      onClick={() => {\r\n                        dispatch(updateTask(task._id, { label: null }));\r\n                      }}\r\n                    >\r\n                      {`No label`}\r\n                      <span className='task-window-labels-dropdown-color'></span>\r\n                    </div>\r\n                    {labels.map((label) => {\r\n                      return (\r\n                        <div\r\n                          className='task-window-labels-dropdown-row'\r\n                          onClick={() => {\r\n                            setShowLabelDropdown(false);\r\n                            dispatch(\r\n                              updateTask(task._id, { label: label._id })\r\n                            );\r\n                          }}\r\n                          key={label._id}\r\n                        >\r\n                          {label.name}\r\n                          <span\r\n                            className='task-window-labels-dropdown-color'\r\n                            style={{ backgroundColor: `${label.colorCode}` }}\r\n                          ></span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </React.Fragment>\r\n                ) : (\r\n                  <div className='task-window-labels-dropdown-row'>\r\n                    No label created\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* End SideBar */}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <footer className='task-window-footer'>\r\n          <button\r\n            className='btn btn-danger'\r\n            onClick={() => {\r\n              deleteTask();\r\n              setShowTaskWindow((prevState) => !prevState);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n          <button\r\n            className='btn'\r\n            onClick={() => {\r\n              setShowTaskWindow((prevState) => !prevState);\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskWindow;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-title.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-description.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\task\\task-comments.component.jsx",[],["234","235"],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\context\\TaskContext.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\modal.style.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\lable-card.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\actions\\label.actions.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\reducers\\label.reducer.js",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\lable-list.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\mini-components\\label-list-popup.component.jsx",["236","237","238"],"import React, { useState } from 'react';\r\nimport './dashboard-popup.styles.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  changeDashboardName,\r\n  deleteDashboard,\r\n} from '../../actions/data.action';\r\nimport Alert from '../layout/alert/alert.layout';\r\nimport { setAlert } from '../../actions/alert.action';\r\nimport DeletePopUp from './delete-popup.component';\r\nimport { deleteLabel, updateLabel } from '../../actions/label.actions';\r\n\r\nconst LabelPopup = ({ labelData, setShowLabelPopup }) => {\r\n  const { title, id } = labelData;\r\n\r\n  const [name, setName] = useState(title);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const saveChanges = async () => {\r\n    if (!name) {\r\n      return dispatch(setAlert('The name field is mandatory', 'danger'));\r\n    }\r\n    await dispatch(updateLabel(name, id));\r\n    setShowLabelPopup((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <div className='dashboard-popup-container'>\r\n      <div className='dashboard-popup-innercontainer'>\r\n        <span className='dashboard-popup-title'>{title}</span>\r\n        <div className='dashboard-popup-rename'>\r\n          <span className='dashboard-popup-rename-title'>Rename</span>\r\n          <input\r\n            className='dashboard-popup-rename-input'\r\n            value={name}\r\n            onChange={(event) => onChange(event)}\r\n            required={true}\r\n          ></input>\r\n        </div>\r\n        <Alert />\r\n\r\n        <div className='dashboard-popup-buttons'>\r\n          <button\r\n            className='btn btn-light card-action-button'\r\n            onClick={() => setShowLabelPopup((prevState) => !prevState)}\r\n          >\r\n            Cancel\r\n          </button>\r\n\r\n          <button\r\n            className='btn btn-danger card-action-button'\r\n            onClick={() => {\r\n              dispatch(deleteLabel(id));\r\n              setShowLabelPopup((prevState) => !prevState);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            className='btn btn-light card-action-button'\r\n            onClick={() => saveChanges()}\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n        {/* {deletePopup && (\r\n          <DeletePopUp\r\n            setDeletePopup={setDeletePopup}\r\n            id={id}\r\n            setShowDashboardPopup={setShowLabelPopup}\r\n            message='Are you sure you want to delete the dashboard?'\r\n            deleteElement={deleteElement}\r\n          />\r\n        )} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LabelPopup;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\tooltip.component.jsx",[],"C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\dashboard\\participants-box.component.jsx",["239"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  addDashboard,\r\n  addPartipants,\r\n  deletePartipant,\r\n} from '../../actions/data.action';\r\nimport './participants-box.styles.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Alert from '../layout/alert/alert.layout';\r\nimport { setAlert } from '../../actions/alert.action';\r\nimport validator from 'validator';\r\nimport ToolTipComponent from '../utils/tooltip.component';\r\n\r\nconst ParticipantsBox = ({ title, style, id }) => {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const colors = ['#009FD4'];\r\n\r\n  useEffect(() => {});\r\n  const dashboard = useSelector((state) => state.data.dashboards).find(\r\n    (dashb) => dashb._id === id\r\n  );\r\n\r\n  const users = dashboard?.users.map((user) => user);\r\n  const me = useSelector((state) => state.auth.user);\r\n\r\n  const onChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    let isValid = true;\r\n    if (!validator.isEmail(email)) {\r\n      dispatch(setAlert('The email is in wrong format', 'danger'));\r\n      isValid = false;\r\n    }\r\n\r\n    if (email === me.user.email) {\r\n      dispatch(setAlert('You cannot add yourself', 'danger'));\r\n      isValid = false;\r\n    }\r\n\r\n    return isValid ? dispatch(addPartipants(id, email)) : null;\r\n  };\r\n\r\n  return (\r\n    <div className='participants-box' style={style}>\r\n      <div className='participants-box-container'>\r\n        <span className='participants-box-title'>{title}</span>\r\n        <div className='participants-box-data'>\r\n          <span className='data-name'>Email</span>\r\n          <input\r\n            type='text'\r\n            className='data-input'\r\n            value={email}\r\n            onChange={(event) => onChange(event)}\r\n            onKeyDown={(e) => (e.key === 'Enter' ? null : null)}\r\n          />\r\n        </div>\r\n        <div className='participants-box-users'>\r\n          {users\r\n            ? users\r\n                .filter((user) => user._id !== me.user._id)\r\n                .map((user) => {\r\n                  return (\r\n                    <div className='participants-box-users-row' key={user._id}>\r\n                      <div\r\n                        className='participants-box-users-avatar'\r\n                        style={{\r\n                          backgroundColor: `${\r\n                            colors[Math.floor(Math.random() * colors.length)]\r\n                          }`,\r\n                        }}\r\n                      >\r\n                        <ToolTipComponent text={`${user.email}`}>\r\n                          <span className='participants-box-users-initial'>\r\n                            {user.name\r\n                              .split(' ')\r\n                              .map((el) => el[0])\r\n                              .join('.')\r\n                              .toUpperCase()}\r\n                          </span>\r\n                        </ToolTipComponent>\r\n                      </div>\r\n                      {me.user._id === dashboard?.owner ? (\r\n                        <div className='participants-box-users-delete'>\r\n                          <span\r\n                            className='icon-material'\r\n                            style={{ marginRight: '.5rem' }}\r\n                            onClick={() =>\r\n                              dispatch(deletePartipant(id, user._id))\r\n                            }\r\n                          >\r\n                            block\r\n                          </span>\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  );\r\n                })\r\n            : null}\r\n        </div>\r\n        <div className='participants-box-action'>\r\n          <Alert />\r\n          <button\r\n            className='btn btn-tertiary margin-top-10 participants-box-action-button'\r\n            onClick={() => onSubmit()}\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParticipantsBox;\r\n","C:\\Users\\PADURARIU\\Desktop\\Files\\Dragos\\Node and React\\task-manager\\client\\src\\components\\utils\\global.functions.js",[],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":20,"column":8,"nodeType":"246","messageId":"247","endLine":20,"endColumn":22},{"ruleId":"244","severity":1,"message":"248","line":6,"column":8,"nodeType":"246","messageId":"247","endLine":6,"endColumn":13},{"ruleId":"244","severity":1,"message":"249","line":2,"column":8,"nodeType":"246","messageId":"247","endLine":2,"endColumn":15},{"ruleId":"244","severity":1,"message":"250","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":19},{"ruleId":"244","severity":1,"message":"251","line":7,"column":21,"nodeType":"246","messageId":"247","endLine":7,"endColumn":29},{"ruleId":"244","severity":1,"message":"248","line":8,"column":8,"nodeType":"246","messageId":"247","endLine":8,"endColumn":13},{"ruleId":"244","severity":1,"message":"252","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":20},{"ruleId":"244","severity":1,"message":"250","line":15,"column":35,"nodeType":"246","messageId":"247","endLine":15,"endColumn":44},{"ruleId":"244","severity":1,"message":"253","line":56,"column":10,"nodeType":"246","messageId":"247","endLine":56,"endColumn":21},{"ruleId":"244","severity":1,"message":"254","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":26},{"ruleId":"244","severity":1,"message":"250","line":12,"column":10,"nodeType":"246","messageId":"247","endLine":12,"endColumn":19},{"ruleId":"244","severity":1,"message":"251","line":12,"column":21,"nodeType":"246","messageId":"247","endLine":12,"endColumn":29},{"ruleId":"244","severity":1,"message":"255","line":13,"column":8,"nodeType":"246","messageId":"247","endLine":13,"endColumn":14},{"ruleId":"244","severity":1,"message":"256","line":32,"column":9,"nodeType":"246","messageId":"247","endLine":32,"endColumn":17},{"ruleId":"240","replacedBy":"257"},{"ruleId":"242","replacedBy":"258"},{"ruleId":"244","severity":1,"message":"259","line":9,"column":10,"nodeType":"246","messageId":"247","endLine":9,"endColumn":18},{"ruleId":"260","severity":1,"message":"261","line":42,"column":42,"nodeType":"262","messageId":"263","endLine":42,"endColumn":44},{"ruleId":"260","severity":1,"message":"261","line":44,"column":42,"nodeType":"262","messageId":"263","endLine":44,"endColumn":44},{"ruleId":"240","replacedBy":"264"},{"ruleId":"242","replacedBy":"265"},{"ruleId":"244","severity":1,"message":"266","line":5,"column":3,"nodeType":"246","messageId":"247","endLine":5,"endColumn":22},{"ruleId":"244","severity":1,"message":"267","line":6,"column":3,"nodeType":"246","messageId":"247","endLine":6,"endColumn":18},{"ruleId":"244","severity":1,"message":"268","line":10,"column":8,"nodeType":"246","messageId":"247","endLine":10,"endColumn":19},{"ruleId":"244","severity":1,"message":"269","line":3,"column":3,"nodeType":"246","messageId":"247","endLine":3,"endColumn":15},"no-native-reassign",["270"],"no-negated-in-lhs",["271"],"no-unused-vars","'socketIOClient' is defined but never used.","Identifier","unusedVar","'Tippy' is defined but never used.","'spinner' is defined but never used.","'useSpring' is defined but never used.","'animated' is defined but never used.","'BeatLoader' is defined but never used.","'deletePopup' is assigned a value but never used.","'deleteTaskAction' is defined but never used.","'styled' is defined but never used.","'dispatch' is assigned a value but never used.",["270"],["271"],"'setAlert' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["270"],["271"],"'changeDashboardName' is defined but never used.","'deleteDashboard' is defined but never used.","'DeletePopUp' is defined but never used.","'addDashboard' is defined but never used.","no-global-assign","no-unsafe-negation"]